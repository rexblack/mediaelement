package htmlelements{	import flash.display.Sprite;	import flash.events.*;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.media.Video;	import flash.media.SoundTransform;	import flash.utils.Timer;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLVariables;    import flash.net.URLRequestMethod;    import flash.display.MovieClip;	 import flash.display.Loader;	 import flash.display.DisplayObject;		import FlashMediaElement;	import HtmlMediaEvent;	public class YouTubeElement extends Sprite implements IMediaElement 	{		private var _currentUrl:String = "";		private var _autoplay:Boolean = true;		private var _preload:String = "";				private var _element:FlashMediaElement;		// event values		private var _currentTime:Number = 0;		private var _duration:Number = 0;		private var _framerate:Number;		private var _isPaused:Boolean = true;		private var _isEnded:Boolean = false;		private var _volume:Number = 1;		private var _isMuted:Boolean = false;		private var _bytesLoaded:Number = 0;		private var _bytesTotal:Number = 0;		private var _bufferedTime:Number = 0;		private var _bufferEmpty:Boolean = false;		private var _videoWidth:Number = -1;		private var _videoHeight:Number = -1;		private var _timer:Timer;				// YouTube stuff		private var _playerLoader:Loader;		private var _player:Object = null;		private var _playerIsLoaded:Boolean = false;		private var _youtubeID:String = "";				//http://code.google.com/p/gdata-samples/source/browse/trunk/ytplayer/actionscript3/com/google/youtube/examples/AS3Player.as		private static const WIDESCREEN_ASPECT_RATIO:String = "widescreen";		private static const QUALITY_TO_PLAYER_WIDTH:Object = {			small: 320,			medium: 640,			large: 854,			hd720: 1280		};		private static const STATE_ENDED:Number = 0;		private static const STATE_PLAYING:Number = 1;		private static const STATE_PAUSED:Number = 2;		private static const STATE_CUED:Number = 5;				public function get player():DisplayObject {			return _player;		}				public function setSize(width:Number, height:Number):void {			if (_player != null) {				_player.setSize(width, height);			}		}				public function get videoHeight():Number {			return _videoHeight;		}		public function get videoWidth():Number {			return _videoWidth;		}		public function duration():Number {			return _duration;		}				public function currentProgress():Number {			return 0;		}		public function currentTime():Number {			return 0;		}		// (1) load()		// calls _connection.connect(); 		// waits for NetConnection.Connect.Success		// _stream gets created		public function YouTubeElement(element:FlashMediaElement, autoplay:Boolean, preload:String, timerRate:Number, startVolume:Number) 		{			_element = element;			_autoplay = autoplay;			_volume = startVolume;			_preload = preload;			_playerLoader = new Loader();			_playerLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, playerLoaderInitHandler);			_playerLoader.load(new URLRequest("http://www.youtube.com/apiplayer?version=3"));			_timer = new Timer(timerRate);			_timer.addEventListener("timer", timerHandler);			_timer.start();		}				private function playerLoaderInitHandler(event:Event):void {			_element.addChild(_playerLoader.content);			_element.setControlDepth();			_playerLoader.content.addEventListener("onReady", onPlayerReady);			_playerLoader.content.addEventListener("onError", onPlayerError);			_playerLoader.content.addEventListener("onStateChange", onPlayerStateChange);			_playerLoader.content.addEventListener("onPlaybackQualityChange", onVideoPlaybackQualityChange);		}						private function onPlayerReady(event:Event):void {			_playerIsLoaded = true;						_player = _playerLoader.content;						if (_youtubeID != "") {				player.loadVideoById(_youtubeID);				_timer.start();			}		}						private function onPlayerError(event:Event):void {			trace("Player error:", Object(event).data);		}				private function onPlayerStateChange(event:Event):void {			trace("State is", Object(event).data);						_duration = _player.getDuration();						switch (Object(event).data) {				case STATE_ENDED:					_isEnded = true;					_isPaused = false;										sendEvent(HtmlMediaEvent.ENDED);										break;								case STATE_PLAYING:					_isEnded = false;					_isPaused = false;										sendEvent(HtmlMediaEvent.PLAY);					sendEvent(HtmlMediaEvent.PLAYING);					break;								case STATE_PAUSED:					_isEnded = false;					_isPaused = true;										sendEvent(HtmlMediaEvent.PAUSE);										break;								case STATE_CUED:					//										// resize?										break;			}		}				private function onVideoPlaybackQualityChange(event:Event):void {			trace("Current video quality:", Object(event).data);			//resizePlayer(Object(event).data);		}					/*		private function resizePlayer(qualityLevel:String):void {			var newWidth:Number = QUALITY_TO_PLAYER_WIDTH[qualityLevel] || 640;			var newHeight:Number;						if (isWidescreen) {			// Widescreen videos (usually) fit into a 16:9 player.				newHeight = newWidth * 9 / 16;			} else {			// Non-widescreen videos fit into a 4:3 player.				newHeight = newWidth * 3 / 4;			}						trace("isWidescreen is", isWidescreen, ". Size:", newWidth, newHeight);			player.setSize(newWidth, newHeight);						// Center the resized player on the stage.			player.x = (stage.stageWidth - newWidth) / 2;			player.y = (stage.stageHeight - newHeight) / 2;						player.visible = true;		}				*/				private function timerHandler(e:TimerEvent) {						if (_playerIsLoaded) {				_bytesLoaded = _player.getVideoBytesLoaded();				_bytesTotal = _player.getVideoBytesTotal();				_currentTime = player.getCurrentTime();								if (!_isPaused)					sendEvent(HtmlMediaEvent.TIMEUPDATE);					if (_bytesLoaded < _bytesTotal)					sendEvent(HtmlMediaEvent.PROGRESS);			}		}		private function getYoutubeID(url:String):String {			var example:String = "http://www.youtube.com/watch?feature=player_embedded&v=yyWWXSwtPP0";									return url.substring(url.lastIndexOf("=")+1);		}		// interface members		public function setSrc(url:String):void {			_currentUrl = url;						_youtubeID = getYoutubeID(url);		}								public function load():void {			// do nothing							if (_playerIsLoaded) {				player.loadVideoById(_youtubeID);				_timer.start();			}							}				public function play():void {			if (_playerIsLoaded) {				_player.playVideo();			}		}		public function pause():void {			if (_playerIsLoaded) {				_player.pauseVideo();			}				}		public function stop():void {			if (_playerIsLoaded) {				_player.pauseVideo();			}			}		public function setCurrentTime(pos:Number):void {			_player.seekTo(pos, false);		}		public function setVolume(volume:Number):void {			_player.setVolume(volume*100);			_volume = volume;		}		public function getVolume():Number {			return _player.getVolume()*100;		}		public function setMuted(muted:Boolean):void {			if (muted) {				_player.mute();					} else {				_player.unMute();			}			_muted = _player.isMuted();			sendEvent(HtmlMediaEvent.VOLUMECHANGE);		}		private function sendEvent(eventName:String) {			// calculate this to mimic HTML5			_bufferedTime = _bytesLoaded / _bytesTotal * _duration;			// build JSON			var values:String = 							"duration:" + _duration + 							",framerate:" + _framerate + 							",currentTime:" + _currentTime + 							",muted:" + _isMuted + 							",paused:" + _isPaused + 							",ended:" + _isEnded + 							",volume:" + _volume +							",src:\"" + _currentUrl + "\"" +							",bytesTotal:" + _bytesTotal +							",bufferedBytes:" + _bytesLoaded +							",bufferedTime:" + _bufferedTime +							",videoWidth:" + _videoWidth +							",videoHeight:" + _videoHeight +							"";			_element.sendEvent(eventName, values);		}	}}